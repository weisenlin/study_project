spring mvc学习笔记：

//==============ajax参数传递spring mvc后端接收=============================
        spring mvc参数接收：
            接收数组的方式：
                当前端传递给后台的数据是数组的时候应该如何接收封装呢？
                刚开始尝试通过设置contentType为‘application/json‘  参数通过JSON.stringify(json)方法想后端传递json参数，后端试图通过@RequestBody Long[] ids获取，这个方法行不通
                请看实例：
                    前端代码：
                    $.ajax({
                            type:'post',
                            url:'/user/role/set.do',
                            dataType:'json',
                            traditional: true,
                            data: {'uid':userId,'ids':strRoleIds},
                            success:function(result){
                                if (result.success) {
                                    closeRoleSetDialog();
                                    $("#dg").datagrid("reload");
                                } else {
                                    $.messager.alert("系统提示", "提交失败，请联系管理员！");
                                }
                            }
                        })
                    最终要的是traditional这个参数需要设置为true,这样前端才能将数组strRoleIds封装成后台的Long[] ids 数组
                    后台代码：
                        @RequestMapping("/role/set.do")
                        @ResponseBody
                        public Map<String, Object> setRoles(Long uid,Long[] ids) {
                            Map<String, Object> map = new HashMap<>();
                            Long uid_1 = Long.parseLong(uid.toString());
                            userService.addRole(uid_1,ids);
                            map.put("success",true);
                            return map;
                        }
            接收json对象：
                单个json对象接收
                前端代码：
                    <script>
                            var user = [{
                                'id':1,
                                'name':'admin'
                            },{
                                'id':2,
                                'name':'admin2'
                            }]
                            $.ajax({
                                type:'post',
                                url:'/user/test.do',
                                data:JSON.stringify(user),
                                dataType:'json',
                                contentType:'application/json',
                                success:function(){
                                    alert("success");
                                }
                            })
                        </script>
                  后台代码:
                      @RequestMapping("/test.do")
                      @ResponseBody
                      public Map<String, Object> test(@RequestBody List<User> user) {
                          Map<String, Object> map = new HashMap<>();
                          map.put("success",true);
                          return map;
                      }

                      总结：前端需要是post请求，contentType需要设置为application/json json对象数组需要通过JSON.stringify()方法处理
                      前端需要通过@RequestBody注解接收参数并封装到对象中


                需求：保存数据，统一保存（一个表单，多个表格数据，每个表格数据在前端存储为json对象的集合）
                    后台正常接收
                    前端处理参数

                    前端代码：
                    //对象处理方法  ps：item[0].id=&item[0].name=&item[1].name&item[1].id
                                var serializeList = function (name, list, prefix) {
                                    prefix = prefix || "";
                                    var str = "";
                                    for (var i = 0; i < list.length; i++) {
                                        var dl = list[i];
                                        for (var key in dl) {
                                            //处理百分号
                                            var value = dl[key];
                                            str += ("&" + prefix + name + "[" + i + "]." + key + "=" + (value || ""));
                                        }
                                    }
                                    return str;
                                };
                    //表单处理
                                   var formDecHeadPart1 = $("#chargeBillForm");
                                   var findPart1Input = formDecHeadPart1.find("input,select,textarea");
                                   var data = ""
                                   findPart1Input.each(function () {
                                       var $this = $(this);
                                       var name = $this.attr("name");
                                       if (!name) {
                                           return;
                                       }
                                       var prop = $this.prop("checked");
                                       if ((($this.attr("type") === "checkbox") || ($this.attr("type") === "radio")) && !$this.prop("checked")) {
                                           return;
                                       }
                                       var value = $this.val();
                                       data += ((data ? "&" : "") + name + "=" + value);//拼装请求参数
                                   });
                                       var feeItemLists = feeItemList.freeItemData;//列表数据
                                        if (feeItemLists && feeItemLists.length > 0) {
                                            data += serializeList("feeAccostItem", feeItemLists);//调用列表数据处理方法拼装数据
                                        }
                                    //发起请求传递参数到后台
                                    $.ajax({
                                        url: ctx + "/fee/charge/save.do",
                                        type: "post",
                                        data: data,
                                        cache: false,
                                        success: function (result) {
                                            if(result.code==403){
                                                popup().error(result.message);
                                                return;
                                            }
                                            popup().info("保存成功");
                                            setTimeout(function () {
                                                window.location.href = "${ctx}/fee/charge/edit/toAdd.do?platBillNo=" + result.data;
                                            }, 1000)
                                        },
                                        error: function () {
                                            $.hideLoading();
                                            popup().error("保存数据失败");
                                        }
                                     })
                                     //后端代码
                                     @ResponseBody
                                         @RequestMapping(value = "/save.do", method = RequestMethod.POST)
                                         public Result save(Fee_Accost_Head fee_accost_head)
                                     对象中存在列表的参数属性  private List<Fee_Accost_Item> feeAccostItem = new ArrayList<>();
                                     属性名称与前端json对象的名称相符





                          多个json对象
                                前端代码
                                <script>
                                    var user = [{
                                        'id':1,
                                        'name':'admin'
                                    },{
                                        'id':2,
                                        'name':'admin2'
                                    }];
                                    var role = {
                                        'id':1,
                                        'name':'name1'
                                    };
                                    var para = {
                                        'user':JSON.stringify(user),
                                        'role':JSON.stringify(role)
                                    }
                                    $.ajax({
                                        type:'post',
                                        url:'/user/test.do',
                                        data:JSON.stringify(para),
                                        dataType:'json',
                                        contentType:'application/json',
                                        success:function(){
                                            alert("success");
                                        }
                                    })
                                </script>
                                提交了Role对象以及User对象的集合
                                后端通过map接收json数据
                                后端代码
                                    @RequestMapping("/test.do")
                                    @ResponseBody
                                    public Map<String, Object> test(@RequestBody Map<String,Object> models) {
                                        Map<String, Object> map = new HashMap<>();
                                        Role role = JSON.parseObject(models.get("role").toString(),Role.class);
                                        List<User> user = JSON.parseArray(models.get("user").toString(),User.class);
                                        map.put("success",true);
                                        return map;
                                    }
                                    通过JSON（com.alibaba.fastjson）转换json对象获取参数
//===============================================================================================================================