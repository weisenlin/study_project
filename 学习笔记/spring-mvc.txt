//整合ssm框架过程中遇到的问题
    1.整合spring mvc 测试controller的过程中发现无法返回json  例如返回一个List或者Map对象
            解决方法：推翻原有的maven依赖，重新添加maven如下所示

            统一spring的版本
            <properties>
                <!-- spring版本号 -->
                <spring.version>4.0.2.RELEASE</spring.version>
                <!-- mybatis版本号 -->
                <mybatis.version>3.2.6</mybatis.version>
                <!-- log4j日志文件管理包版本 -->
                <slf4j.version>1.7.7</slf4j.version>
                <log4j.version>1.2.17</log4j.version>
             </properties>
              <!-- spring核心包 -->
                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-core</artifactId>
                   <version>${spring.version}</version>
                 </dependency>

                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-web</artifactId>
                   <version>${spring.version}</version>
                 </dependency>
                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-oxm</artifactId>
                   <version>${spring.version}</version>
                 </dependency>
                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-tx</artifactId>
                   <version>${spring.version}</version>
                 </dependency>

                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-jdbc</artifactId>
                   <version>${spring.version}</version>
                 </dependency>

                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-webmvc</artifactId>
                   <version>${spring.version}</version>
                 </dependency>
                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-aop</artifactId>
                   <version>${spring.version}</version>
                 </dependency>

                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-context-support</artifactId>
                   <version>${spring.version}</version>
                 </dependency>

                 <dependency>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-test</artifactId>
                   <version>${spring.version}</version>
                 </dependency>


                <!--json添加该依赖返回json数据不报错-->
                <dependency>
                    <groupId>org.codehaus.jackson</groupId>
                    <artifactId>jackson-mapper-asl</artifactId>
                    <version>1.9.9</version>
                </dependency>

     2. 项目无法启动,总是使用未指定的配置文件
        解决办法：web.xml中的配置错误 contextConfigLocation  拼写错误导致只想缺省值
                <servlet>
                    <servlet-name>spring-mvc</servlet-name>
                    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                    <init-param>
                      <param-name>contextConfigLocation</param-name>
                      <param-value>classpath*:spring*.xml</param-value>
                    </init-param>
                    <load-on-startup>1</load-on-startup>
                  </servlet>



      3.mybatis整合失败

       <!-- idea不会编译src的java目录的xml文件,将IDEA maven项目中src源代码下的xml等资源文件编译进classes文件夹 -->
          <resources>
            <resource>
              <directory>src/main/java</directory>
              <includes>
                <include>**/*.xml</include>
              </includes>
            </resource>
          </resources>




          ============================
          spring mvc 异步请求：另外启动一个线程去处理，当前异步请求直接返回提示信息'后台正在处理'，同时发起请求查询结果如果结果为未完成，递归调用，完成的时候直接return;
                    思路：线程开启后首先向redis存储一个以当前用户id为key的值，证明当前线程正在运行

                    helloworld: https://www.jianshu.com/p/15aa3cd1a622

                    第一步：让在web.xml中配置的servelet和filter都支持异步调用。
                        <async-supported>true</async-supported>

                        <servlet>
                          <description>spring mvc servlet</description>
                          <servlet-name>springMvc</servlet-name>
                          <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
                            <init-param>
                              <description>spring mvc 配置文件</description>
                              <param-name>contextConfigLocation</param-name>
                              <param-value>classpath:spring-mvc.xml</param-value>
                            </init-param>
                          <load-on-startup>1</load-on-startup>
                          <async-supported>true</async-supported>
                        </servlet>

                        第二步：异步调用注解支持
                        在Spring配置中加上对异步调用注解的支持。
                        <!-- 支持异步方法执行 -->
                        <task:executor id="myexecutor" pool-size="5"  />
                        <task:annotation-driven executor="myexecutor"/>

                        第三步：创建异步调用类和方法
                        这里模拟异步发邮件，所以就创建异步发送邮件类。

                        把邮件发送类注册成bean，加上@Service即可。
                        在该类上加上@EnableAsync，表示该类支持异步调用。
                        在对应异步方法上加上@Async注解。


                        @Controller
                        @RequestMapping("/asyncController")
                        public class AsyncController extends BaseController {

                            //注入邮件类
                            @Autowired
                            private SendMailUtil sendMailUtil;

                            //注入其他服务类
                            @Autowired
                            private OtherService otherService;

                            @RequestMapping(params = "async")
                            @ResponseBody
                            public Json async(HttpServletRequest request) {
                                Json j = new Json();
                                Other other = OtherService.other();
                                if (other != null) {
                                    j.setObj(other);
                                    j.setSuccess(true);
                                    //异步发送邮件
                                    sendMailUtil.SEND_SUBMIT_EMAIL("-----------", "-----------");
                                    System.out.println("Execute before sending mail！");
                                    //在邮件发送之前就返回了
                                    return j;
                                }
                            }
                        }

     =================================================================================
     spring boot 只需要在启动类上添加注解@EnableAsync

     异步方法中添加注解@Async就可以实现异步调用